---
description: CI/CD 및 리포지토리 정책을 정의합니다.
alwaysApply: true
---

# 리포지토리 정책 개요

## 목적
PRD의 품질 요구사항을 충족하고, 안정적이고 협업 가능한 개발 환경을 구축하기 위한 리포지토리 관리 정책을 정의한다.

## 핵심 원칙
- **품질 우선**: 모든 코드는 품질 게이트를 통과해야 함
- **자동화**: 수동 개입을 최소화하고 자동화된 검증 강화
- **투명성**: 모든 검증 결과와 정책을 명확히 공개
- **협업**: 팀원 간 효과적인 코드 리뷰와 소통 지원

# 브랜치 전략

## 브랜치 구조
```
main (기본 브랜치)
├── develop (개발 통합)
├── feature/기능명 (기능 개발)
├── bugfix/버그명 (버그 수정)
├── hotfix/긴급수정명 (긴급 수정)
└── release/버전명 (릴리즈 준비)
```

## 브랜치 보호 규칙

### main 브랜치 보호
- **필수 상태 검사**: quality-checks, security-scan, test-coverage, build-success
- **PR 리뷰**: 최소 1명의 승인 필요
- **관리자 강제**: 모든 규칙에 관리자도 적용
- **강제 푸시 금지**: 안전성 보장
- **대화 해결**: 모든 대화 해결 필요

### develop 브랜치 보호
- **필수 상태 검사**: quality-checks, test-coverage, build-success
- **PR 리뷰**: 최소 1명의 승인 필요
- **강제 푸시 금지**: 안전성 보장
- **대화 해결**: 모든 대화 해결 필요

## 브랜치 명명 규칙
- **기능 개발**: `feature/user-authentication`, `feature/api-rate-limiting`
- **버그 수정**: `bugfix/login-validation-error`, `bugfix/memory-leak-fix`
- **긴급 수정**: `hotfix/security-vulnerability`, `hotfix/critical-bug-fix`
- **릴리즈 준비**: `release/v1.0.0`, `release/v1.1.0-beta`

# CI/CD 파이프라인 설계

## 메인 CI/CD 워크플로우 구성

### 품질 검사 단계
- **코드 품질**: pre-commit, ruff, mypy 실행
- **테스트 커버리지**: pytest로 80% 이상 달성
- **정적 분석**: 코드 품질 및 보안 검사
- **결과 업로드**: Codecov, 아티팩트 저장

### 보안 검사 단계
- **Bandit**: Python 보안 취약점 스캔
- **Safety**: 의존성 보안 검사
- **Semgrep**: 고급 보안 규칙 검사
- **보고서 생성**: JSON 형식으로 결과 저장

### 빌드 및 패키징 단계
- **패키지 빌드**: uv build로 Python 패키지 생성
- **Docker 이미지**: 컨테이너 이미지 빌드
- **아티팩트 저장**: 빌드 결과물 저장 및 관리

### 배포 단계
- **프로덕션 배포**: main 브랜치에만 자동 배포
- **스모크 테스트**: 배포 후 기본 기능 검증
- **알림**: Slack을 통한 배포 결과 통지

## PR 리뷰 자동화 워크플로우

### 자동 PR 리뷰 구성
- **트리거**: PR 생성, 수정, 재오픈 시
- **PR Review Assistant**: 자동 리뷰 실행
- **리포트 업로드**: 리뷰 결과를 아티팩트로 저장
- **PR 코멘트**: 자동으로 리뷰 결과 코멘트

### 리뷰 결과 관리
- **기존 봇 코멘트**: 중복 방지를 위한 자동 삭제
- **새 리포트**: 최신 리뷰 결과로 업데이트
- **품질 게이트**: 자동 품질 검증 및 결과 표시

# 필수 체크 및 검증

## 품질 게이트 체크
- **품질 등급**: A~D 등급 자동 계산
- **차단 이슈**: high severity 이슈 발견 시 즉시 차단
- **경고 이슈**: medium/low severity 이슈 정보 제공
- **자동 검증**: CI/CD 파이프라인에서 자동 실행

## 테스트 커버리지 체크
- **최소 커버리지**: 80% 이상 목표
- **XML 리포트**: pytest 결과를 XML 형식으로 생성
- **자동 검증**: 커버리지 기준 미달 시 빌드 실패
- **트렌드 분석**: 커버리지 변화 추적

# 아티팩트 관리

## 아티팩트 보존 정책
- **보존 기간**: 7일 기본 보존
- **자동 정리**: 만료된 아티팩트 자동 삭제
- **크기 제한**: 100MB 이하로 관리
- **분류 관리**: 품질, 보안, 빌드 결과물 분리

## 아티팩트 활용
- **품질 리포트**: 품질 검사 결과 다운로드
- **보안 리포트**: 보안 스캔 결과 분석
- **빌드 결과물**: 배포 및 테스트에 활용

# PR 코멘트 및 알림

## 자동 코멘트 생성
- **품질 등급**: 이모지와 함께 등급 표시
- **요약 정보**: TL;DR, 주요 변경사항 요약
- **차단 이슈**: 발견된 차단 이슈 상세 표시
- **경고 이슈**: 상위 5개 경고 이슈 표시
- **권장사항**: 개선을 위한 구체적 제안

## Slack 알림 설정
- **PR 이벤트**: 생성, 수정, 완료 시 알림
- **워크플로우 완료**: CI/CD 파이프라인 결과 알림
- **웹훅 연동**: GitHub Actions와 Slack 연동
- **상태별 알림**: 성공/실패에 따른 차별화된 메시지

# 설정 파일 관리

## 워크플로우 설정 중앙화
- **공통 설정**: Python 버전, uv 버전 등 중앙 관리
- **품질 기준**: 커버리지 임계값, 린팅 규칙 등
- **아티팩트 설정**: 보존 기간, 최대 크기 등
- **알림 설정**: Slack, 이메일, Teams 연동 설정

## 환경별 설정
- **프로덕션**: 엄격한 보호 규칙, 다중 리뷰어 필요
- **스테이징**: 개발자 리뷰, 단일 승인자
- **개발**: 자유로운 개발 환경, 최소한의 제약

# 품질 보장 체계

## 자동화된 품질 검증
- **코드 스타일**: ruff를 통한 자동 포맷팅
- **타입 안전성**: mypy를 통한 정적 타입 검사
- **보안 검사**: 다중 보안 도구를 통한 취약점 탐지
- **테스트 품질**: 커버리지 및 테스트 결과 자동 검증

## 품질 게이트 연동
- **자동 차단**: 품질 기준 미달 시 PR 병합 차단
- **품질 등급**: A~D 등급으로 품질 수준 표시
- **개선 가이드**: 품질 향상을 위한 구체적 제안
- **트렌드 분석**: 품질 변화 추적 및 개선 방향 제시

이러한 CI/CD 및 리포지토리 정책을 통해 PRD의 품질 요구사항을 충족하고, 안정적이고 협업 가능한 개발 환경을 구축할 수 있습니다.

# 필수 체크
- 린트/타입 통과, final_report.json 생성, quality_grade 제출
