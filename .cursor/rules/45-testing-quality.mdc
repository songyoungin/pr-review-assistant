---
description: 테스트 전략 및 원칙
alwaysApply: true
---

# 테스트 전략 및 원칙

## 핵심 원칙
- **테스트 우선 개발**: 코드 구현 전 테스트 작성 (TDD)
- **자동화**: 모든 테스트는 CI/CD 파이프라인에서 자동 실행
- **커버리지**: 핵심 비즈니스 로직은 90% 이상 커버리지 목표
- **신뢰성**: 테스트는 결정적이고 재현 가능해야 함

## 테스트 피라미드
```
    E2E Tests (10%)
       /\
      /  \
Integration Tests (20%)
    /    \
   /      \
Unit Tests (70%)
```

# 단위 테스트 (Unit Tests)

## 테스트 구조
- **테스트 파일 명명**: `test_<module_name>.py` 형식
- **테스트 함수 사용**: pytest 권장 방식으로 클래스 대신 함수 사용
- **테스트 명명**: `test_<function_name>_<scenario>()` 형식

## 테스트 작성 원칙
- **Given-When-Then**: 테스트 구조화로 가독성 향상
- **단일 책임**: 각 테스트는 하나의 시나리오만 검증
- **독립성**: 테스트 간 의존성 없이 독립적으로 실행
- **재현 가능성**: 동일한 입력에 대해 항상 동일한 결과

## Mock 사용 규칙
- **데코레이터 방식**: 컨텍스트 매니저 대신 데코레이터 사용
- **의존성 주입**: 테스트 가능한 구조로 설계
- **외부 서비스**: Git, LLM 등 외부 의존성 모킹
- **테스트 데이터**: 별도 fixtures 디렉토리에서 관리

## 테스트 데이터 관리
- **fixtures 디렉토리**: 테스트 데이터를 체계적으로 관리
- **diff 데이터**: 다양한 변경사항 시나리오 포함
- **설정 파일**: 테스트 환경별 설정 분리
- **응답 데이터**: 외부 API 응답 시뮬레이션

# 통합 테스트 (Integration Tests)

## 에이전트 통합 테스트
- **전체 워크플로**: 실제 툴을 사용한 end-to-end 테스트
- **에러 격리**: 한 에이전트의 실패가 다른 에이전트에 영향 주지 않음
- **상태 관리**: 에이전트 간 상태 공유 및 동기화 검증
- **병렬 처리**: 독립적인 에이전트 동시 실행 검증

## 툴 통합 테스트
- **Git 툴**: 실제 저장소와의 연동 테스트
- **LLM 툴**: 실제 API 호출 및 응답 처리 테스트
- **정적 분석**: 코드 품질 도구 연동 테스트
- **스키마 분석**: 데이터베이스 스키마 변경 감지 테스트

# E2E 테스트 (End-to-End Tests)

## 전체 워크플로 E2E 테스트
- **완전한 PR 리뷰**: 실제 GitHub PR을 대상으로 한 전체 프로세스
- **성능 검증**: PRD NFR-1 기준(5분 이내) 준수 확인
- **결과 완성도**: 모든 에이전트 결과 및 최종 리포트 검증
- **출력 파일**: JSON/Markdown 리포트 생성 확인

## 대용량 PR 처리 테스트
- **10k+ 라인**: 대용량 변경사항 처리 능력 검증
- **샘플링 적용**: 대용량 시 샘플링 전략 검증
- **근거 보존**: 핵심 근거 라인 보존 확인
- **메모리 관리**: 대용량 처리 시 메모리 사용량 제한

# 품질 보증 및 정적 분석

## 코드 품질 검사
- **pre-commit**: 자동 코드 품질 검사 도구
- **ruff**: Python 코드 포맷팅 및 린팅
- **mypy**: 정적 타입 검사
- **설정 파일**: pyproject.toml에 상세 설정

## 커버리지 목표 및 설정
- **최소 커버리지**: 80% 이상 목표
- **커버리지 리포트**: HTML, XML, 터미널 출력
- **커버리지 실패**: 기준 미달 시 CI/CD 실패
- **제외 설정**: 테스트 코드, 설정 파일 등 제외

# 성능 테스트

## 성능 기준 검증
- **처리 시간**: PRD NFR-1 기준 준수 확인
- **메모리 사용량**: 500MB 이하 제한 준수
- **동시성**: 여러 PR 동시 처리 능력
- **확장성**: 부하 증가에 따른 성능 변화

## 성능 테스트 시나리오
- **소규모 PR**: 1k 라인 이하, 1분 이내 처리
- **중간 규모 PR**: 2k-5k 라인, 2분 이내 처리
- **대규모 PR**: 5k-10k 라인, 5분 이내 처리
- **초대규모 PR**: 10k 라인 이상, 샘플링 적용

## 성능 모니터링
- **실시간 모니터링**: 처리 진행 상황 실시간 추적
- **병목 지점**: 성능 저하 원인 자동 식별
- **리소스 사용량**: CPU, 메모리, 디스크 I/O 모니터링
- **알림 시스템**: 성능 임계값 초과 시 자동 알림

# 테스트 환경 관리

## 테스트 데이터베이스
- **임시 데이터베이스**: 테스트용 독립적인 DB 환경
- **스키마 관리**: 테스트 전용 스키마 자동 생성
- **데이터 격리**: 테스트 간 데이터 간섭 방지
- **자동 정리**: 테스트 완료 후 자동 정리

## 환경 변수 관리
- **테스트 환경**: 테스트 전용 환경변수 설정
- **민감 정보**: API 키, 토큰 등 테스트용 값 사용
- **환경 분리**: 개발/테스트/프로덕션 환경 완전 분리
- **자동 복원**: 테스트 완료 후 원래 환경으로 복원

# 테스트 실행 및 CI/CD

## 로컬 테스트 실행
- **가상환경 활성화**: `.venv` 활성화 후 실행
- **단위 테스트**: 기본 기능 테스트만 실행
- **통합 테스트**: 에이전트 간 연동 테스트
- **E2E 테스트**: 전체 워크플로 테스트
- **성능 테스트**: 성능 기준 검증 테스트

## CI/CD 파이프라인
- **자동 실행**: 모든 PR에서 자동 테스트 실행
- **병렬 실행**: 독립적인 테스트는 동시 실행
- **결과 수집**: 테스트 결과 및 커버리지 자동 수집
- **품질 게이트**: 테스트 실패 시 PR 병합 차단

## 테스트 결과 관리
- **JUnit XML**: 표준 테스트 결과 형식
- **커버리지 리포트**: HTML, XML 형식으로 생성
- **아티팩트 저장**: 테스트 결과물 자동 저장
- **트렌드 분석**: 테스트 결과 변화 추적

# 테스트 품질 향상

## 테스트 유지보수
- **테스트 코드 품질**: 테스트 코드도 프로덕션 코드와 동일한 품질 기준
- **리팩토링**: 테스트 코드 정기적 리팩토링
- **중복 제거**: 공통 테스트 로직 함수화
- **문서화**: 테스트 목적과 시나리오 명확히 문서화

## 테스트 자동화
- **테스트 생성**: 반복적인 테스트 자동 생성
- **데이터 생성**: 테스트 데이터 자동 생성
- **환경 설정**: 테스트 환경 자동 구성
- **결과 분석**: 테스트 결과 자동 분석 및 리포트

## 지속적 개선
- **성공률 모니터링**: 테스트 성공률 지속적 추적
- **실패 원인 분석**: 테스트 실패 원인 체계적 분석
- **테스트 전략 개선**: 테스트 커버리지 및 품질 지속 개선
- **팀 교육**: 테스트 작성 및 실행 방법 정기 교육

이러한 테스트 전략을 통해 PRD의 품질 요구사항을 충족하고, 안정적이고 신뢰할 수 있는 시스템을 구축할 수 있습니다.
